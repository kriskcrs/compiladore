package arbolast;
import java_cup.runtime.Symbol;

parser code
{:

    public String Error = "";
    public Nodo instrucciones;
    @Override
    public void syntax_error(Symbol s){
       //System.out.println("Error en simbolo 1: "+s.value+", "+s.left+", "+s.right);
       /*Autor Cristian
        Aqui se instancia la case ErrorSintactico, para almacenar el valor del token s que se trae
        */ 
        ErrorSintactico mensaje= new ErrorSintactico();
        mensaje.setTipo("Sintactico");
        mensaje.setSimbolo((String) s.value);
        mensaje.setEmpieza(s.left);
        mensaje.setTermina(s.right);

        //se agrega al array declarado en ArbolAst
        ArbolAst.errorS.add(mensaje);

    }

    @Override
    public void unrecovered_syntax_error(Symbol s){
        System.out.println("Error en simbolo: "+s.value+", "+s.left+", "+s.right);
    }
:}

action code
{:
:}

terminal PARENTESIS_ABIERTO, PARENTESIS_CERRADO, COMA, IF, ELSE, END, DO, WHILE, FOR, CASE, SWITCH, DEFAULT,
    CONCAT, PUTS, OR, AND, NOT, IGUAL_IGUAL, MENOR, MAYOR, IGUAL, MAS, 
    ASTERISCO, PUNTO_COMA, DOS_PUNTOS, LLAVE_ABIERTO, LLAVE_CERRADO;

terminal String ENTERO, CADENA, ID;

non terminal inicio;

non terminal Nodo instrucciones, instruccion, asignacion, if, do, while,for, puts, case, switch, defatul,
    expresion, expresiones;

precedence left OR;
precedence left AND;
precedence left NOT;
precedence left IGUAL_IGUAL;
precedence left MAYOR, MENOR;
precedence left MAS;
precedence left ASTERISCO;
precedence right IGUAL;

start with inicio;

inicio ::= instrucciones:insts
{:
parser.instrucciones = insts;
:};
    

instrucciones ::= instrucciones:insts instruccion:inst
{:
Nodo nodo = insts;
nodo.hijos.add(inst);
RESULT = nodo;
:}
    | instruccion:inst
{:
Nodo nodo = new Nodo("instrucciones");
nodo.hijos.add(inst);
RESULT = nodo;
:}
    ;

instruccion ::= asignacion:inst
{:
RESULT = inst;
:}
    | if:inst
{:
RESULT = inst;
:}
    | for:inst
{:
RESULT = inst;
:}
    | do:inst
{:
RESULT = inst;
:}
    | while:inst
{:
RESULT = inst;
:}
    | switch:inst
{:
RESULT = inst;
:}
    | case:inst
{:
RESULT = inst;
:}
    | puts:inst
{:
RESULT = inst;
:}
| error{:
Nodo n = new Nodo("error");
RESULT = n;
:}
    ;

asignacion ::= ID:id IGUAL expresion:expr
{:
Nodo nodoId = new Nodo("variable");
nodoId.hijos.add(new Nodo(id));
Nodo inst = new Nodo("asignacion");
inst.hijos.add(nodoId);
inst.hijos.add(expr);
RESULT = inst;
:}
    ;

if ::= IF expresion:expr instrucciones:insts END
{:
Nodo nodo = new Nodo("if");
nodo.hijos.add(expr);
nodo.hijos.add(insts);
RESULT = nodo;
:}
    | IF expresion:expr instrucciones:insts ELSE instrucciones:insts2 END
{:
Nodo nodo = new Nodo("if");
nodo.hijos.add(expr);
nodo.hijos.add(insts);
nodo.hijos.add(insts2);
RESULT = nodo;
:}
    ;

switch ::= SWITCH PARENTESIS_ABIERTO expresion:expr PARENTESIS_CERRADO
{:
Nodo nodo = new Nodo("switch");
nodo.hijos.add(expr);
RESULT = nodo;
:};

case ::= CASE expresion:expr instrucciones:insts  END
{:
Nodo nodo = new Nodo("case");
nodo.hijos.add(expr);
nodo.hijos.add(insts);
RESULT = nodo;
:}
    ; 
    


for ::= FOR PARENTESIS_ABIERTO asignacion:asig PUNTO_COMA 
expresion:expr PUNTO_COMA 
instrucciones:inst2 
PARENTESIS_CERRADO
instrucciones:inst3 
END {:
Nodo nodo = new Nodo("for");

Nodo n = new Nodo("instrucciones");
n.hijos.add(asig);
nodo.hijos.add(n);

nodo.hijos.add(expr);
nodo.hijos.add(inst2);
nodo.hijos.add(inst3);
RESULT = nodo;
:};


do ::= DO LLAVE_ABIERTO instrucciones:insts LLAVE_CERRADO WHILE expresion:expr  END
{:
Nodo nodo = new Nodo("do");
nodo.hijos.add(insts);
nodo.hijos.add(expr);
RESULT = nodo;
:};

while ::= WHILE expresion:expr instrucciones:insts END
{:
Nodo nodo = new Nodo("while");
nodo.hijos.add(expr);
nodo.hijos.add(insts);
RESULT = nodo;
:};

puts ::= PUTS expresion:expr
{:
Nodo nodo =  new Nodo("puts");
nodo.hijos.add(expr);
RESULT = nodo;
:}
    ;

expresion ::= expresion:expr MAS expresion:expr2
{:
Nodo nodo = new Nodo("+");
nodo.hijos.add(expr);
nodo.hijos.add(expr2);
RESULT = nodo;
:}
    | expresion:expr ASTERISCO expresion:expr2
{:
Nodo nodo = new Nodo("*");
nodo.hijos.add(expr);
nodo.hijos.add(expr2);
RESULT = nodo;
:}
    | expresion:expr MAYOR expresion:expr2
{:
Nodo nodo = new Nodo(">");
nodo.hijos.add(expr);
nodo.hijos.add(expr2);
RESULT = nodo;
:}
    | expresion:expr MENOR expresion:expr2
{:
Nodo nodo = new Nodo("<");
nodo.hijos.add(expr);
nodo.hijos.add(expr2);
RESULT = nodo;
:}
    | expresion:expr IGUAL_IGUAL expresion:expr2
{:
Nodo nodo = new Nodo("==");
nodo.hijos.add(expr);
nodo.hijos.add(expr2);
RESULT = nodo;
:}
    | NOT expresion:expr
{:
Nodo nodo = new Nodo("not");
nodo.hijos.add(expr);
RESULT = nodo;
:}
    | expresion:expr OR expresion:expr2
{:
Nodo nodo = new Nodo("or");
nodo.hijos.add(expr);
nodo.hijos.add(expr2);
RESULT = nodo;
:}
    | expresion:expr AND expresion:expr2
{:
Nodo nodo = new Nodo("and");
nodo.hijos.add(expr);
nodo.hijos.add(expr2);
RESULT = nodo;
:}
    | PARENTESIS_ABIERTO expresion:expr PARENTESIS_CERRADO
{:
RESULT = expr;
:}
    | CONCAT PARENTESIS_ABIERTO expresiones:exprs PARENTESIS_CERRADO
{:
Nodo nodo = new Nodo("concatenar");
nodo.hijos.add(exprs);
RESULT = nodo;
:}
    | ID:id
{:
Nodo nodo = new Nodo("variable");
nodo.hijos.add(new Nodo(id));
RESULT = nodo;
:}
    | ENTERO:entero
{:
Nodo nodo = new Nodo("valor");
Nodo tipo = new Nodo("entero");
nodo.hijos.add(tipo);
tipo.hijos.add(new Nodo(entero));
RESULT = nodo;
:}
    | CADENA:cadena
{:
Nodo nodo = new Nodo("valor");
Nodo tipo = new Nodo("cadena");
nodo.hijos.add(tipo);
tipo.hijos.add(new Nodo(cadena));
RESULT = nodo;
:}
    ;

expresiones ::= expresiones:exprs COMA expresion:expr
{:
Nodo nodo = exprs;
nodo.hijos.add(expr);
RESULT = nodo;
:}
    | expresion:expr
{:
Nodo nodo = new Nodo("expresiones");
nodo.hijos.add(expr);
RESULT = nodo;
:}
    ;
